modelolm=lm(price~1,data=CASAS)
summary(modelolm)
mean(CASAS$price)
se(CASAS$price)
hist(CASAS$price)
qqnorm((CASAS$price-mean(CASAS$price))/sd(CASAS$price))
abline(a=0,b=1,col="red")
logPrecios=log(CASAS$price)
hist(logPrecios)
qqnorm((logPrecios-mean(logPrecios))/sd(logPrecios))
abline(a=0,b=1,col="red")
exp(mean(logPrecios))
exp(median(logPrecios))
hist(logPrecios)
qqnorm((logPrecios-mean(logPrecios))/sd(logPrecios))
abline(a=0,b=1,col="red")
exp(mean(logPrecios))
exp(median(logPrecios))
boxplot(CASAS$price)
boxplot(logPrecios)
boxplot(CASAS$price)
boxplot(logPrecios)
alphas=seq(from=0,to=0.5,by=0.01)
medias_recortadas=c()
medias_winsorizadas=c()
for (alpha in alphas){
medias_recortadas=c(medias_recortadas,mean(CASAS$price, trim=alpha))
medias_winsorizadas=c(medias_winsorizadas,MediaWinsor(CASAS$price,probs=c(alpha,1-alpha)))
}
Estimadores=data.frame(alphas)
Estimadores$media=mean(CASAS$price)
Estimadores$mediana=median(CASAS$price)
Estimadores$recortada=medias_recortadas
Estimadores$winsorizada=medias_winsorizadas
Estimadores
plot(Estimadores$recortada~Estimadores$alphas,ylim=c(min(Estimadores[,2:5]),max(Estimadores[,2:5])),col="red",type="l", main="representación de medias robustas", xlab="alfas",ylab="precio")
lines(alphas,Estimadores$winsorizada,col="blue")
lines(alphas,Estimadores$media,col="orange")
lines(alphas,Estimadores$mediana,col="green")
legend(x=mean(alphas),y=max(Estimadores[,2:5]),legend=c("media","mediana","media recortada","media winsorizada"),col=c("orange","green","red","blue"),pch=20)
modelorlm=rlm(price~1,data=CASAS)
summary(modelorlm)
abline(h=modelorlm$coefficients[1],col="black")
str(Ventas)
head(Ventas)
summary(Ventas)
Ventas=read.csv("train.csv")
str(Ventas)
head(Ventas)
summary(Ventas)
summary(Ventas$Sales)
hist(Ventas$Sales)
alphas=seq(from=0,to=0.5,by=0.01)
medias_recortadas=c()
medias_winsorizadas=c()
for (alpha in alphas){
medias_recortadas=c(medias_recortadas,mean(Ventas$Sales, trim=alpha))
medias_winsorizadas=c(medias_winsorizadas,MediaWinsor(Ventas$Sales,probs=c(alpha,1-alpha)))
}
Estimadores=data.frame(alphas)
Estimadores$media=mean(Ventas$Sales)
Estimadores$mediana=median(Ventas$Sales)
Estimadores$recortada=medias_recortadas
Estimadores$winsorizada=medias_winsorizadas
Estimadores
plot(Estimadores$recortada~Estimadores$alphas,ylim=c(min(Estimadores[,2:5]),max(Estimadores[,2:5])),col="red",type="l", main="representación de medias robustas", xlab="alfas",ylab="precio")
lines(alphas,Estimadores$winsorizada,col="blue")
lines(alphas,Estimadores$media,col="orange")
lines(alphas,Estimadores$mediana,col="green")
legend(x=mean(alphas),y=max(Estimadores[,2:5])-100,legend=c("media","mediana","media recortada","media winsorizada"),col=c("orange","green","red","blue"),pch=20)
modelolm=lm(Sales~1,data=Ventas)
summary(modelolm)
modelorlm=rlm(Sales~1,data=Ventas)
summary(modelorlm)
abline(h=modelorlm$coefficients[1],col="black")
summary(Ventas)
Ventas$Promo=as.factor(Ventas$Promo)
Ventas$Open=as.factor(Ventas$Open)
Ventas$SchoolHoliday=as.factor(Ventas$SchoolHoliday)
Ventas$DayOfWeek=as.factor(Ventas$DayOfWeek)
Ventas$Store=as.factor(Ventas$Store)
summary(Ventas)
Ventas$Sales_DIS=ceiling((10*rank(Ventas$Sales))/(length(Ventas$Sales)))
set.seed(1234)
SAMPLE = sample.split(Ventas$Sales_DIS, SplitRatio = .75)
VentasTrain = subset(Ventas, SAMPLE == TRUE)
VentasTest = subset(Ventas, SAMPLE == FALSE)
modelolm2=lm(Sales~Promo+Open+StateHoliday+SchoolHoliday+Customers,data=VentasTrain)
summary(modelolm2)
modelorlm2=rlm(Sales~Promo+Open+StateHoliday+SchoolHoliday+Customers,data=VentasTrain)
summary(modelorlm2)
modelolm2=lm(Sales~Promo+Open+StateHoliday+SchoolHoliday+Customers,data=VentasTrain)
summary(modelolm2)
modelorlm2=rlm(Sales~Promo+Open+StateHoliday+SchoolHoliday+Customers,data=VentasTrain)
summary(modelorlm2)
VentasTrain$prediccionLM=predict(modelolm2,type="response")
R2_Train_LM=1-sum((VentasTrain$Sales-VentasTrain$prediccionLM)^2)/sum((VentasTrain$Sales-mean(VentasTrain$Sales))^2)
VentasTest$prediccionLM=predict(modelolm2,newdata=VentasTest,type="response")
R2_Test_LM=1-sum((VentasTest$Sales-VentasTest$prediccionLM)^2)/sum((VentasTest$Sales-mean(VentasTest$Sales))^2)
R2_Train_LM
R2_Test_LM
VentasTrain$prediccionRLM=predict(modelorlm2,type="response")
R2_Train_RLM=1-sum((VentasTrain$Sales-VentasTrain$prediccionRLM)^2)/sum((VentasTrain$Sales-mean(VentasTrain$Sales))^2)
VentasTest$prediccionRLM=predict(modelorlm2,newdata=VentasTest,type="response")
R2_Test_RLM=1-sum((VentasTest$Sales-VentasTest$prediccionRLM)^2)/sum((VentasTest$Sales-mean(VentasTest$Sales))^2)
R2_Train_RLM
R2_Test_RLM
SCE_LM=sum((VentasTest$Sales-VentasTest$prediccionLM)^2) #MSE
SCE_RLM=sum((VentasTest$Sales-VentasTest$prediccionRLM)^2) #MSE
SCE_LM
SCE_RLM
MAE_LM=sum(abs(VentasTest$Sales-VentasTest$prediccionLM))
MAE_RLM=sum(abs(VentasTest$Sales-VentasTest$prediccionRLM))
MAE_LM
MAE_RLM
modelolm2=lm(Sales~Promo+Open+StateHoliday+SchoolHoliday+Store,data=VentasTrain)
setwd("~/MASTER BIG DATA - CIFF/HERRAMIENTAS/ANÁLISIS ESTADÍSTICO")
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
Estacionaria=rnorm(200,mean=10,sd=3)
plot(Estacionaria,type="l")
acf(Estacionaria)
pacf(Estacionaria)
RuidoBlanco=rnorm(200,mean=0,sd=3)
plot(RuidoBlanco,type="l")
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
Estacionaria=rnorm(200,mean=10,sd=3)
plot(Estacionaria,type="l")
acf(Estacionaria)
pacf(Estacionaria)
RuidoBlanco=rnorm(200,mean=0,sd=3)
plot(RuidoBlanco,type="l")
acf(RuidoBlanco)
pacf(RuidoBlanco)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
AR1=c(5)
alpha=5
alpha1=0.61
for (i in 1:200){
AR1=c(AR1,AR1[i]*alpha1+ruido[i]+alpha)
}
plot(AR1,type="l")
acf(AR1)
pacf(AR1)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
MA1=ruido[1]
beta1=-0.61
for (i in 2:200){
MA1=c(MA1,ruido[i]+ruido[i-1]*beta1)
}
plot(MA1,type="l")
acf(MA1)
pacf(MA1)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
RW=c(5)
for (i in 1:200){
RW=c(RW,RW[i]+ruido[i])
}
plot(RW,type="l")
acf(RW)
pacf(MA1)
plot(AirPassengers)
Air_ts=ts(AirPassengers,frequency=12)
plot(AirPassengers)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
RW=c(5)
for (i in 1:200){
RW=c(RW,RW[i]+ruido[i])
}
plot(RW,type="l")
acf(RW)
pacf(MA1)
plot(AirPassengers)
Air_ts=ts(AirPassengers,frequency=12)
plot(Air_ts)
acf(Air_ts,lag.max=48)
pacf(Air_ts,lag.max=48)
plot(RW,type="l")
acf(RW)
pacf(RW)
plot(RW,type="l")
acf(RW)
plot(AirPassengers)
Air_ts=ts(AirPassengers,frequency=12)
plot(Air_ts)
acf(Air_ts,lag.max=48)
pacf(Air_ts,lag.max=48)
tsdisplay(Air_ts)
Air_ts_d1=diff(Air_ts, lag=1,differences=1)
plot(Air_ts_d1)
acf(Air_ts_d1,lag.max=48)
plot(Air_ts_d1)
acf(Air_ts_d1,lag.max=48)
pacf(Air_ts_d1,lag.max=48)
tsdisplay(Air_ts_d1)
Air_ts_d1_d12=diff(diff(Air_ts, lag=1,differences=1),lag=12,differences=1)
plot(Air_ts_d1_d12)
acf(Air_ts_d1_d12,lag.max=48)
pacf(Air_ts_d1_d12,lag.max=48)
tsdisplay(Air_ts_d1_d12)
Air_ts_d1_d12=diff(diff(Air_ts, lag=1,differences=1),lag=12,differences=1)
plot(Air_ts_d1_d12)
acf(Air_ts_d1_d12,lag.max=48)
pacf(Air_ts_d1_d12,lag.max=48)
tsdisplay(Air_ts_d1_d12)
Air_model=arima(Air_ts,order=c(0,1,1),seasonal=list(order = c(0, 1, 0)))
plot(forecast(Air_model,h=24))
summary(Air_model)
tsdisplay(residuals(Air_model))
Air_model=arima(Air_ts,order=c(0,1,1),seasonal=list(order = c(0, 1, 0)))
plot(forecast(Air_model,h=24))
summary(Air_model)
tsdisplay(residuals(Air_model))
Auto_Air_model=auto.arima(Air_ts,trace=TRUE)
plot(forecast(Auto_Air_model,h=24))
summary(Auto_Air_model)
tsdisplay(residuals(Auto_Air_model))
Ventas=read.csv2("Ventas.csv")
Ventas_A0143=Ventas[Ventas$Producto=="A0143",]
str(Ventas_A0143)
head(Ventas_A0143)
summary(Ventas_A0143)
Ventas_A0143$Fecha=as.Date(Ventas_A0143$Fecha)
Ventas_A0143$Producto=as.factor(Ventas_A0143$Producto)
Ventas_A0143$Year=format(Ventas_A0143$Fecha,'%Y')
Ventas_A0143$Year=factor(Ventas_A0143$Year,levels=c("2013","2014","2015"))
Ventas_A0143$Fecha=as.Date(Ventas_A0143$Fecha)
Ventas_A0143$Producto=as.factor(Ventas_A0143$Producto)
Ventas_A0143$Year=format(Ventas_A0143$Fecha,'%Y')
Ventas_A0143$Year=factor(Ventas_A0143$Year,levels=c("2013","2014","2015"))
Ventas_A0143$Mes=months(Ventas_A0143$Fecha)
Ventas_A0143$Mes=factor(Ventas_A0143$Mes,levels=c("enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"))
Ventas_A0143$Dia=weekdays(Ventas_A0143$Fecha)
Ventas_A0143$Dia=factor(Ventas_A0143$Dia,levels=c("lunes","martes","miércoles","jueves","viernes","sábado","domingo") )
str(Ventas_A0143)
head(Ventas_A0143)
summary(Ventas_A0143)
plot(Ventas_A0143$Cantidad, type="l")
plot(Ventas_A0143[,c("Fecha","Cantidad","Year","Mes")])
plot(Ventas_A0143$Cantidad~Ventas_A0143$Year)
plot(Ventas_A0143$Cantidad~Ventas_A0143$Mes)
plot(Ventas_A0143$Cantidad~Ventas_A0143$Dia)
plot(Ventas_A0143$Cantidad, type="l")
plot(Ventas_A0143$Cantidad, type="l")
Ventas_A0143=Ventas_A0143[order(Ventas_A0143$Fecha),]
plot(Ventas_A0143$Cantidad, type="l")
plot(Ventas_A0143$Fecha,Ventas_A0143$Cantidad, type="l")
Ventas_A0143_Mes=aggregate(Ventas_A0143$Cantidad~Ventas_A0143$Year+Ventas_A0143$Mes,FUN=sum)
head(Ventas_A0143_Mes)
colnames(Ventas_A0143_Mes)=c("Year","Mes","Cantidad")
plot(Ventas_A0143_Mes)
plot(Ventas_A0143_Mes$Cantidad~Ventas_A0143_Mes$Year)
plot(Ventas_A0143_Mes$Cantidad~Ventas_A0143_Mes$Mes)
plot(Ventas_A0143_Mes$Cantidad,type="l")
Ventas_A0143_Mes=Ventas_A0143_Mes[order(Ventas_A0143_Mes$Year,Ventas_A0143_Mes$Mes ),]
Ventas_ts <- ts(Ventas_A0143_Mes$Cantidad,start=c(2013,1),frequency= 12)
plot(Ventas_ts)
print(Ventas_ts)
Mul_Desc=decompose(Ventas_ts,type="multiplicative")
Add_Desc=decompose(Ventas_ts,type="additive")
plot(Mul_Desc)
plot(Add_Desc)
Mul_Desc
Add_Desc
plot(Ventas_ts)
acf(Ventas_ts)
pacf(Ventas_ts)
Ventas_ts_d1=diff(Ventas_ts, lag=1,differences=1)
plot(Ventas_ts_d1)
acf(Ventas_ts_d1,lag.max=36)
pacf(Ventas_ts_d1,lag.max=36)
Ventas_ts_d1_d12=diff(diff(Ventas_ts, lag=1,differences=1),lag=12,differences=1)
plot(Ventas_ts_d1_d12)
acf(Ventas_ts_d1_d12,lag.max=36)
pacf(Ventas_ts_d1_d12,lag.max=36)
Ventas_arima=arima(Ventas_ts,order=c(0,1,1),seasonal=list(order = c(0, 1, 0)))
plot(forecast(Ventas_arima,h=24))
summary(Ventas_arima)
tsdisplay(residuals(Ventas_arima))
model_arima=auto.arima(Ventas_ts,seasonal=TRUE,trace=TRUE)
plot(forecast(model_arima,h=24))
summary(model_arima)
model_ma=ma(Ventas_ts,order=3)
summary(model_ma)
plot(forecast(model_ma, fan=TRUE,h=24))
forecast(model_ma, level=c(80,95),h=24)
model_hw=HoltWinters(Ventas_ts)
summary(model_hw)
plot(forecast(model_hw, fan=TRUE,h=24))
forecast(model_hw,level=c(80,95),h=24)
model_tslm=tslm(Ventas_ts~trend + season,data=Ventas_ts)
summary(model_tslm)
plot(forecast(model_tslm, fan=TRUE,h=24))
forecast(model_tslm,level=c(80,95),h=24)
Encuestas=read.csv2("ResultadosEncuestas.csv",stringsAsFactors = FALSE)
Encuestas=read.csv2("ResultadosEncuestas.csv",stringsAsFactors = FALSE)
str(Encuestas)
head(Encuestas)
summary(Encuestas)
Encuestas$Grupo=as.factor(Encuestas$Grupo)
Encuestas$Fecha=as.factor(Encuestas$Fecha)
str(Encuestas)
head(Encuestas)
summary(Encuestas)
Encuestas_2016=Encuestas[Encuestas$Fecha=="Encuesta 2016",]
boxplot(Encuestas_2016$Satisfaccion~Encuestas_2016$Grupo)
t.test(Encuestas_2016$Satisfaccion[Encuestas_2016$Grupo=="Afectado"],Encuestas_2016$Satisfaccion[Encuestas_2016$Grupo=="No Afectado"])
aggregate(Satisfaccion~Fecha+Grupo, FUN=mean,data=Encuestas)
Encuestas_2015=Encuestas[Encuestas$Fecha=="Encuesta 2015",]
colnames(Encuestas_2015)=c("Clientes","Grupo2015","Satisfaccion2015","Fecha2015")
colnames(Encuestas_2016)=c("Clientes","Grupo2016","Satisfaccion2016","Fecha2016")
Encuestas_Merged=merge(Encuestas_2015,Encuestas_2016)
head(Encuestas_Merged)
sum(!Encuestas_Merged$Grupo2015==Encuestas_Merged$Grupo2016)
Encuestas_Merged$Diff=Encuestas_Merged$Satisfaccion2015-Encuestas_Merged$Satisfaccion2016
t.test(Encuestas_Merged$Diff[Encuestas_Merged$Grupo2015=="Afectado"],Encuestas_Merged$Diff[Encuestas_Merged$Grupo2015=="No Afectado"])
library(gap)
library(ggplot2)
library(dplyr)
library(lattice)
library(car)
library(GGally)
library(data.table)
library(glmnet)
library(plyr)
library(vcd)
library(vcdExtra)
library(psych)
library(car)
library(ggExtra)
library(ROCR)
library(caTools)
library(MASS)
house_train_original=read.csv("house_train.csv",stringsAsFactors = FALSE, sep=",")
getwd()
setwd("/home/juan/MASTER BIG DATA - CIFF/HERRAMIENTAS/ANÁLISIS ESTADÍSTICO")
getwd()
Estacionaria=rnorm(200,mean=10,sd=3)
plot(Estacionaria,type="l")
acf(Estacionaria)
pacf(Estacionaria)
RuidoBlanco=rnorm(200,mean=0,sd=3)
plot(RuidoBlanco,type="l")
acf(RuidoBlanco)
pacf(RuidoBlanco)
Estacionaria=rnorm(200,mean=10,sd=3)
Estacionaria=rnorm(200,mean=10,sd=3)
plot(Estacionaria,type="l")
plot(Estacionaria,type="l")
acf(Estacionaria)
pacf(Estacionaria)
par(mfrow = c(2, 1))
acf(Estacionaria)
pacf(Estacionaria)
par(mfrow = c(1, 2))
acf(Estacionaria)
pacf(Estacionaria)
plot(Estacionaria,type="l")
par(mfrow = c(1, 1))
plot(Estacionaria,type="l")
par(mfrow = c(1, 2))
acf(Estacionaria)
pacf(Estacionaria)
par(mfrow = c(1, 1))
plot(RuidoBlanco,type="l")
plot(RuidoBlanco,type="l")
plot(Estacionaria,type="l")
par(mfrow = c(1, 2))
acf(RuidoBlanco)
pacf(RuidoBlanco)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
AR1=c(5)
alpha=5
alpha1=0.61
for (i in 1:200){
AR1=c(AR1,AR1[i]*alpha1+ruido[i]+alpha)
}
par(mfrow = c(1, 1))
plot(AR1,type="l")
par(mfrow = c(1, 2))
acf(AR1)
pacf(AR1)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
MA1=ruido[1]
beta1=-0.61
for (i in 2:200){
MA1=c(MA1,ruido[i]+ruido[i-1]*beta1)
}
par(mfrow = c(1, 1))
plot(MA1,type="l")
par(mfrow = c(1, 2))
acf(MA1)
pacf(MA1)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
RW=c(5)
for (i in 1:200){
RW=c(RW,RW[i]+ruido[i])
}
par(mfrow = c(1, 1))
plot(RW,type="l")
par(mfrow = c(1, 2))
acf(RW)
pacf(RW)
plot(AirPassengers)
par(mfrow = c(1, 1))
plot(AirPassengers)
Air_ts=ts(AirPassengers,frequency=12)
plot(Air_ts)
Air_ts=ts(AirPassengers,frequency=12)
plot(Air_ts)
plot(AirPassengers)
plot(Air_ts)
acf(Air_ts,lag.max=48)
pacf(Air_ts,lag.max=48)
tsdisplay(Air_ts)
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
RW=c(5)
for (i in 1:200){
RW=c(RW,RW[i]+ruido[i])
}
par(mfrow = c(1, 1))
plot(RW,type="l")
par(mfrow = c(1, 2))
acf(RW)
pacf(RW)
par(mfrow = c(1, 1))
plot(AirPassengers)
Air_ts=ts(AirPassengers,frequency=12)
plot(Air_ts)
acf(Air_ts,lag.max=48)
pacf(Air_ts,lag.max=48)
tsdisplay(Air_ts)
Air_ts_d1=diff(Air_ts, lag=1,differences=1)
plot(Air_ts_d1)
acf(Air_ts_d1,lag.max=48)
pacf(Air_ts_d1,lag.max=48)
tsdisplay(Air_ts_d1)
Air_ts_d1_d12=diff(diff(Air_ts, lag=1,differences=1),lag=12,differences=1)
plot(Air_ts_d1_d12)
acf(Air_ts_d1_d12,lag.max=48)
pacf(Air_ts_d1_d12,lag.max=48)
tsdisplay(Air_ts_d1_d12)
Air_model=arima(Air_ts,order=c(0,1,1),seasonal=list(order = c(0, 1, 0)))
plot(forecast(Air_model,h=24))
summary(Air_model)
tsdisplay(residuals(Air_model))
Auto_Air_model=auto.arima(Air_ts,trace=TRUE)
plot(forecast(Auto_Air_model,h=24))
plot(forecast(Auto_Air_model,h=24))
summary(Auto_Air_model)
tsdisplay(residuals(Auto_Air_model))
if (!require("itsmr")) {
install.packages("itsmr")
library(itsmr)
}
pathdata <- "/home/juan/ciff/AnalisisEstadistico/AnalisisEstadistico/data2/"
pathimgs <- "/home/juan/ciff/AnalisisEstadistico/AnalisisEstadistico/images2/"
filedata <- "monthly-milk-production-pounds-p.csv"
setwd(pathdata)
df_milk <- read.csv(filedata, header=TRUE, sep=";")
Auto_Air_model=auto.arima(df_milk,trace=TRUE)
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
Auto_Air_model=auto.arima(df_milk,trace=TRUE)
plot(forecast(Auto_Air_model,h=24))
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
produccion = df_milk[,2]
Auto_Air_model=auto.arima(produccion,trace=TRUE)
plot(forecast(Auto_Air_model,h=24))
summary(Auto_Air_model)
tsdisplay(residuals(Auto_Air_model))
plot(forecast(Auto_Air_model,h=24))
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
produccion = df_milk[,2]
Auto_Air_model=auto.arima(produccion,trace=TRUE)
xv = c("season", 12, "trend", 1)
plot(forecast(produccion, xv, modelo, h=24, opt=2))
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
produccion = df_milk[,2]
auto_modelo=auto.arima(produccion,trace=TRUE)
xv = c("season", 12, "trend", 1)
plot(forecast(produccion, xv, auto_modelo, h=24, opt=2))
summary(auto_modelo)
tsdisplay(residuals(auto_modelo))
